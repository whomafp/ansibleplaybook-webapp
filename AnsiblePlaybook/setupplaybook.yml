# This playbook set up our website with lamp.
---
- hosts: all
  become: true
  vars_files: 
   - vars/default.yml

  tasks: 
   - name: Install required packages
     apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
     loop: ['aptitude']
 
 # Apache configuration
   - name: Install LAMP
     apt: name={{ item }} update_cache=yes state=latest
     loop: ['apache2','mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php']

   - name: Create document root
     file: 
       path: "/var/www/{{ http_host }}"
       state: directory
       owner: "{{ app_user }}"
       mode: '0755'

   - name: Set up Apache virtualhost
     template:
       src: "files/apache.conf.j2"
       dest: "/etc/apache2/sites-available/{{ http_conf }}"
     notify: Reload Apache

   - name: Enable new site
     shell: /usr/sbin/a2ensite {{ http_conf }}
     notify: Reload Apache

   - name: Disable default Apache site
     shell: /usr/sbin/a2dissite 000-default.conf
     when: disable_default
     notify: Reload Apache

   #MySQL configuration
   - name: Sets the root password
     mysql_user:
       login_user: "{{ mysql_user }}"
       login_password: " "
       name: "{{ mysql_user }}"
       password: "{{ mysql_user_password }}"
       login_unix_socket: /var/run/mysqld/mysqld.sock
       
   - name: Removes all anonymous user accounts
     mysql_user:
       name: ''
       host_all: yes
       state: absent
       login_user: "{{ mysql_user }}"
       login_password: "{{ mysql_user_password }}"

   - name: Removes the MySQL test database
     mysql_db:
      name: test
      state: absent
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_user_password }}"     

# UFW Configuration
   - name: "UFW - Allow HTTP on Port {{ http_port }}"
     ufw:
       rule: allow
       port: "{{ http_port }}"
       proto: tcp

# PHP Info image
   - name: Setting up PHP Info Page
     template: 
       src: "files/info.php.j2"
       dest: "/var/www/{{ http_host }}/info.php"
   - name: Ansible copy directory to the remote server
     copy:
       src: "website/"
       dest: "/var/www/{{ http_host }}/"

  handlers:
   - name: Reload Apache
     service:
       name: apache2
       state: reloaded

   - name: Restart Apache
     service:
       name: apache2
       state: restarted





